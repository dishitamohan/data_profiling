import google.generativeai as genai
import os

# Configure Gemini API (replace with your actual Gemini API key)
genai.configure(api_key="AIzaSyCiGZUTd4MheB995OM9Yjk7cgeq6AmETNs")

def suggest_remediation_gemini(flags):
    """
    Uses Gemini AI to generate comprehensive remediation actions based on the provided flags.
    
    Args:
        flags (list): List of validation flags for a transaction.
    
    Returns:
        str: Remediation suggestions generated by Gemini.
    """
    # Construct a prompt with the flags
    prompt = (
        "You are a financial compliance expert. A transaction has been flagged for the following issues: "
        + ", ".join(flags)
        + ". Provide comprehensive remediation actions including adjustments, explanations, and compliance steps."
    )
    
    model = genai.GenerativeModel('models/gemini-1.5-pro-002')
    response = model.generate_content(prompt)
    return response.text

def add_remediation_to_data(data):
    """
    For each transaction (row) in the DataFrame, extract the validation flags from the 'Validation_Report'
    column, then use Gemini to generate remediation actions.
    
    Args:
        data (pd.DataFrame): DataFrame containing transactions with a 'Validation_Report' column.
        
    Returns:
        pd.DataFrame: DataFrame with an added column 'Remediation_Advice'.
    """
    def get_flags(report):
        # Assume report is a dict (if it's a string, consider converting via eval or json.loads)
        if isinstance(report, str):
            try:
                report_dict = eval(report)
                return report_dict.get("flags", [])
            except Exception:
                return []
        elif isinstance(report, dict):
            return report.get("flags", [])
        return []

    # Generate remediation advice for each transaction
    data["Remediation_Advice"] = data["Validation_Report"].apply(lambda rep: suggest_remediation_gemini(get_flags(rep)))
    # data["Remediation_Advice"] = data["Flags"].apply(suggest_remediation_gemini)

    data.to_csv(r"Team_Repo2\data\remediated_transactions.csv", index=False)
    return data

if __name__ == "__main__":
    import pandas as pd
    # For testing: load validated transactions that contain a "Validation_Report" column
    df = pd.read_csv("../data/validated_transactions.csv")
    df = add_remediation_to_data(df)
    print("Remediation actions assigned. Sample results:")
    print(df[["Transaction_Amount", "Validation_Report", "Remediation_Advice"]].head())
